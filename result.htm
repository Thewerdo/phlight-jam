<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>Phlight - Results</title>
    <link rel="icon" type="image/png" href="logo.PNG">
    <link rel="stylesheet" href="index.css">
    <link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css"/>
    <script defer src="https://pyscript.net/latest/pyscript.js"></script>
</head>
<body>
    <nav class="thenav">
        <a href="index.htm" class="floatleft"><img src="logo.png" class="logosize"></a>
        <div class="navbar">
            <li><a href="about.htm">ABOUT</a></li>
            <li><a href="faq.htm">FAQ</a></li>
            <li><a href="launch.htm">LAUNCH</a></li>
        </div>
    </nav>

    <h1 class="centered">Results</h1>
    <div class="sliders-container" id="sliders-container"></div>
    <div class="images-container">
        <img id="image1" />
        <img id="image2" />
    </div>
    <div class="buttons-container flex-center">
        <button class="buttonshadow" id="get-xmp">Get .xmp</button>
        <button class="buttonshadow" id="get-cube">Get .cube</button>
    </div>

    <py-config>
        packages = [
            "pillow",
            "numpy"
        ]
    </py-config>
    <py-script src="Phlight_back.py"></py-script>

    <script>
        // Slider configurations
        const sliderConfigs = [
            { label: 'Temperature', index: 0, min: -100, max: 100 },
            { label: 'Tint', index: 1, min: -150, max: 150 },
            { label: 'Black', index: 2, min: -100, max: 100 },
            { label: 'Shadow', index: 3, min: -100, max: 100 },
            { label: 'Mid-tone', index: 4, min: -100, max: 100 },
            { label: 'Highlight', index: 5, min: -100, max: 100 },
            { label: 'White', index: 6, min: -100, max: 100 },
            { label: 'Shadow Hue', index: 7, min: -180, max: 180 },
            { label: 'Shadow Saturation', index: 8, min: -100, max: 100 },
            { label: 'Shadow Value', index: 9, min: -100, max: 100 },
            { label: 'Mid-tone Hue', index: 10, min: -180, max: 180 },
            { label: 'Mid-tone Saturation', index: 11, min: -100, max: 100 },
            { label: 'Mid-tone Value', index: 12, min: -100, max: 100 },
            { label: 'Highlight Hue', index: 13, min: -180, max: 180 },
            { label: 'Highlight Saturation', index: 14, min: -100, max: 100 },
            { label: 'Highlight Value', index: 15, min: -100, max: 100 },
            { label: 'Saturation', index: 16, min: -100, max: 100 },
            { label: 'Red Hue', index: 17, min: -180, max: 180 },
            { label: 'Red Saturation', index: 18, min: -100, max: 100 },
            { label: 'Red Luminance', index: 19, min: -100, max: 100 },
            { label: 'Orange Hue', index: 20, min: -180, max: 180 },
            { label: 'Orange Saturation', index: 21, min: -100, max: 100 },
            { label: 'Orange Luminance', index: 22, min: -100, max: 100 },
            { label: 'Yellow Hue', index: 23, min: -180, max: 180 },
            { label: 'Yellow Saturation', index: 24, min: -100, max: 100 },
            { label: 'Yellow Luminance', index: 25, min: -100, max: 100 },
            { label: 'Green Hue', index: 26, min: -180, max: 180 },
            { label: 'Green Saturation', index: 27, min: -100, max: 100 },
            { label: 'Green Luminance', index: 28, min: -100, max: 100 },
            { label: 'Aqua Hue', index: 29, min: -180, max: 180 },
            { label: 'Aqua Saturation', index: 30, min: -100, max: 100 },
            { label: 'Aqua Luminance', index: 31, min: -100, max: 100 },
            { label: 'Blue Hue', index: 32, min: -180, max: 180 },
            { label: 'Blue Saturation', index: 33, min: -100, max: 100 },
            { label: 'Blue Luminance', index: 34, min: -100, max: 100 },
            { label: 'Purple Hue', index: 35, min: -180, max: 180 },
            { label: 'Purple Saturation', index: 36, min: -100, max: 100 },
            { label: 'Purple Luminance', index: 37, min: -100, max: 100 },
            { label: 'Magenta Hue', index: 38, min: -180, max: 180 },
            { label: 'Magenta Saturation', index: 39, min: -100, max: 100 },
            { label: 'Magenta Luminance', index: 40, min: -100, max: 100 },
            { label: 'Vignette Amount', index: 41, min: -100, max: 100 },
            { label: 'Sharpness', index: 43, min: -100, max: 100 }
        ];

        // Load data from sessionStorage
        const result = JSON.parse(sessionStorage.getItem('result'));
        document.getElementById('image1').src = sessionStorage.getItem('image1');
        document.getElementById('image2').src = sessionStorage.getItem('image2');

        // Create sliders
        const slidersContainer = document.getElementById('sliders-container');
        sliderConfigs.forEach(config => {
            const div = document.createElement('div');
            div.className = 'slider-item';
            const label = document.createElement('label');
            label.textContent = `${config.label}: ${result[config.index]}`;
            const input = document.createElement('input');
            input.type = 'range';
            input.min = config.min;
            input.max = config.max;
            input.value = result[config.index];
            input.disabled = true;
            div.appendChild(label);
            div.appendChild(input);
            slidersContainer.appendChild(div);
        });

        // Handle .xmp download
        document.getElementById('get-xmp').addEventListener('click', function() {
            const xmpContent = pyscript.interpreter.call('generate_xmp', result);
            const blob = new Blob([xmpContent], { type: 'text/xml' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'preset.xmp';
            a.click();
            URL.revokeObjectURL(url);
        });

        // Handle .cube download
        document.getElementById('get-cube').addEventListener('click', function() {
            const cubeContent = pyscript.interpreter.call('generate_cube', result);
            const blob = new Blob([cubeContent], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'preset.cube';
            a.click();
            URL.revokeObjectURL(url);
        });
    </script>
</body>
</html>